/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI.Panel;

import DAO.DaoImple.PhanCongDAO;
import DAO.DaoImple.chamcongdao;
import MODEl.PhanCong;
import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamPanel;
import com.google.zxing.*;
import com.google.zxing.common.HybridBinarizer;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import javax.swing.*;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.ZonedDateTime;

/**
 *
 * @author Admin
 */
public class quetmaqr extends javax.swing.JPanel implements Runnable {

    private Webcam webcam;
    private Thread thread;
    private chamcongdao dao = new chamcongdao();

    /**
     * Creates new form quetmaqr
     */
    public quetmaqr() {
        initComponents();
        setLayout(new BorderLayout());
        webcam = Webcam.getDefault();
        if (webcam == null) {
            JOptionPane.showMessageDialog(this, "Không tìm thấy webcam!");
            return;
        }
        WebcamPanel panel = new WebcamPanel(webcam);
        add(panel, BorderLayout.CENTER);
        thread = new Thread(this);
        thread.start();
    }

@Override
public void run() {
    while (true) {
        try {
            BufferedImage image = webcam.getImage();
            if (image == null) {
                continue;
            }
            LuminanceSource source = new BufferedImageLuminanceSource(image);
            BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));

            Result result = new MultiFormatReader().decode(bitmap);
            if (result != null) {
                String rawText = result.getText();
                String maNV = rawText;

                if (rawText.contains("=")) {
                    String[] parts = rawText.split("=");
                    if (parts.length == 2) {
                        maNV = parts[1];
                    }
                }
                LocalDateTime now = LocalDateTime.now();
                Timestamp timestamp = Timestamp.valueOf(now);
                boolean moCa = daMoCa(maNV);
                   PhanCongDAO pcDAO = new PhanCongDAO();
                PhanCong ca = pcDAO.getCaLam(maNV, now.toLocalDate());

          if (!isTrongThoiGianChoPhep_DB(moCa, now, ca)) {
              
                    JOptionPane.showMessageDialog(this, "⏱ Không trong thời gian chấm công hợp lệ!");
                    Thread.sleep(3000); 
                    continue;
                }

                if (moCa) {
                    if (dao.updateGioRa(maNV, timestamp)) {
                        JOptionPane.showMessageDialog(this, "✅ Kết ca: " + maNV);
                    } else {
                        JOptionPane.showMessageDialog(this, "❌ Không thể kết ca.");
                    }
                } else {
                    if (dao.insertChamCong(maNV, timestamp)) {
                        JOptionPane.showMessageDialog(this, "✅ Bắt đầu ca: " + maNV);
                    } else {
                        JOptionPane.showMessageDialog(this, "❌ Không thể chấm công.");
                    }
                }

                Thread.sleep(30000);
            }
        } catch (NotFoundException e) {
           
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
 private boolean isTrongThoiGianChoPhep_DB(boolean daMoCa, LocalDateTime now, PhanCong ca) {
    if (ca == null) return false;
    LocalTime hienTai = now.toLocalTime();
    LocalTime gioVao = ca.getGioBatDau();
    LocalTime gioRa = ca.getGioKetThuc();
    
    System.out.println("---- Kiểm tra thời gian hợp lệ ----");
System.out.println("DaMoCa: " + daMoCa);
System.out.println("Hiện tại: " + hienTai);
System.out.println("Giờ vào: " + gioVao);
System.out.println("Giờ ra: " + gioRa);
System.out.println("----------------------------------");

    if (!daMoCa) {
       
        LocalTime startWindow = gioVao.minusMinutes(15);
        LocalTime endWindow = gioVao.plusMinutes(5); 
        return !hienTai.isBefore(startWindow) && !hienTai.isAfter(endWindow);
    } else {
        LocalTime endWindow = gioRa.plusMinutes(30);
        return !hienTai.isBefore(gioRa) && !hienTai.isAfter(endWindow);
    }
}

 ZonedDateTime zonedNow = ZonedDateTime.now(ZoneId.of("Asia/Ho_Chi_Minh"));
LocalDateTime now = zonedNow.toLocalDateTime();
    private boolean daMoCa(String maNV) {     
        return dao.daMoCa(maNV);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
